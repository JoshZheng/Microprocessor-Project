#include <xc.h>
#include<stdio.h>
#include<stdlib.h>
#include <time.h>
#include <pic18f4520.h>

#pragma config OSC = INTIO67  //OSCILLATOR SELECTION BITS (INTERNAL OSCILLATOR BLOCK, PORT FUNCTION ON RA6 AND RA7)
#pragma config WDT = OFF      //Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config PWRT = OFF     //Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = ON     //Brown-out Reset Enable bits (Brown-out Reset enabled in hardware only (SBOREN is disabled))
#pragma config PBADEN = OFF   //PORTB A/D Enable bit (PORTB<4:0> pins are configured as digital I/O on Reset)
#pragma config LVP = OFF      //Single-Supply ICSP Enable bit (Single-Supply ICSP disabled)
#pragma config CPD = OFF      //Data EEPROM Code Protection bit (Data EEPROM not code-protected)


#define _XTAL_FREQ 1000000

int mode = 0;
int state = 0;

void __interrupt(high_priority)H_ISR() {

    if (mode && PIR1bits.ADIF) {
        //step4
        int value = ADRESH;
        double value_ = (double) value;
        value_ = (value_ / 4) * 2 * 4;
        value_ = ((value_ * 8) / 1023) + 52;
        value = (int) value_;
        CCP1CONbits.DC1B = value % 4;
        CCPR1L = value / 4;
        //clear flag bit
        PIR1bits.ADIF = 0;
        //step5 & go back step3
        __delay_ms(1);
        ADCON0bits.GO = 1;
    }
    if (INTCONbits.INT0IF) {
        if (mode == 0) {
            mode = 1;
            state = 1;
            PORTD = 2;
        } else {
            mode = 0;
            state = 2;
            PORTD = 4;
            CCPR1L = 0x00;
        }
        __delay_ms(1);
        INTCONbits.INT0IF = 0;
    }
    return;
}

void main(void) {
    //configure OSC and port
    TRISA = 0;
    OSCCONbits.IRCF = 0b110; //4MHz
    TRISAbits.RA0 = 1; //analog input port

    //step1
    ADCON1bits.VCFG0 = 0;
    ADCON1bits.VCFG1 = 0;
    ADCON1bits.PCFG = 0b1110; //AN0 ?analog input,???? digital
    ADCON0bits.CHS = 0b0000; //AN0 ?? analog input
    ADCON2bits.ADCS = 0b100; //????000(1Mhz < 2.86Mhz)
    ADCON2bits.ACQT = 0b010; //Tad = 2 us acquisition time?2Tad = 4 > 2.4
    ADCON0bits.ADON = 1;
    ADCON2bits.ADFM = 0; //left justified 


    //step2
    PIE1bits.ADIE = 1;
    PIR1bits.ADIF = 0;
    INTCONbits.PEIE = 1;
    INTCONbits.GIE = 1;

    TRISBbits.RB0 = 1;
    TRISBbits.RB1 = 1;
    RCONbits.IPEN = 0;
    INTCONbits.INT0IF = 0;
    INTCONbits.INT0IE = 1;
    INTCONbits.GIE = 1;



    // Timer2 -> On, prescaler -> 4
    T2CONbits.TMR2ON = 0b1;
    T2CONbits.T2CKPS = 0b01;

    // Internal Oscillator Frequency, Fosc = 125 kHz, Tosc = 8 ï¿½s
    OSCCONbits.IRCF = 0b001;

    // PWM mode, P1A, P1C active-high; P1B, P1D active-high
    CCP1CONbits.CCP1M = 0b1100;

    // CCP1/RC2 -> Output
    CCP1CONbits.DC1B = 0b00;

    TRISC = 0;
    LATC = 0;
    TRISD = 0;
    PORTD = 1;
    PR2 = 0x9b;

    //CCPR1L = 0x04;
    CCPR1L = 0x00;
    //CCP1CONbits.DC1B = 0b00;

    //step3
    ADCON0bits.GO = 1;

    while (1) {
        
    }

    return;
}
